// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float> DepthInput;
RWTexture2D<float> Result;
float4 DepthParam;		// focal, baseline, minDepth, maxDepth
int ImageWidth;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int cx = ImageWidth >> 1;

	float depth = DepthInput[id.xy];
	double camera_x = ( ( ImageWidth - id.x - cx) * depth / DepthParam.x) + DepthParam.y;
	double warp_x = ImageWidth - ( (DepthParam.x * camera_x / depth) + cx );
	if ((int)warp_x >= 0 && (int)(warp_x + 0.5) < ImageWidth && depth > DepthParam.z*100 && depth < DepthParam.w*100 ) 
	{
		uint2 outID = uint2((int)warp_x, id.y);		
		Result[outID] = depth;
		outID.x = (int)(warp_x + 0.5);
		Result[outID] = depth;
	}
	
	camera_x = ( ( id.x - cx) * depth / DepthParam.x) - DepthParam.y;
	warp_x = ( (DepthParam.x * camera_x / depth) + cx );
	if ((int)warp_x >= 0 && (int)(warp_x + 0.5) < ImageWidth && depth > DepthParam.z*100 && depth < DepthParam.w*100 ) 
	{
		uint2 outID = uint2((int)warp_x, id.y);		
		Result[outID] = depth;
		outID.x = (int)(warp_x + 0.5);
		Result[outID] = depth;
	}
	
}
